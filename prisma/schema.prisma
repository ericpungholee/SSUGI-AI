generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  folders       Folder[]

  @@map("users")
}

model Document {
  id            String    @id @default(cuid())
  title         String    @default("Untitled Document")
  content       Json      @default("{}")
  plainText     String?   @db.Text
  wordCount     Int       @default(0)
  isStarred     Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId      String?
  folder        Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([folderId])
  @@map("documents")
}

model Folder {
  id            String    @id @default(cuid())
  name          String
  icon          String?
  isDeleted     Boolean   @default(false)
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Document[]
  parentId      String?
  parent        Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Folder[]  @relation("FolderHierarchy")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@map("folders")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}